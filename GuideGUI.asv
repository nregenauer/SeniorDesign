function varargout = GuideGUI(varargin)
% GUIDEGUI MATLAB code for GuideGUI.fig
%      GUIDEGUI, by itself, creates a new GUIDEGUI or raises the existing
%      singleton*.
%
%      H = GUIDEGUI returns the handle to a new GUIDEGUI or the handle to
%      the existing singleton*.
%
%      GUIDEGUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUIDEGUI.M with the given input arguments.
%
%      GUIDEGUI('Property','Value',...) creates a new GUIDEGUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before GuideGUI_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to GuideGUI_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help GuideGUI

% Last Modified by GUIDE v2.5 26-Mar-2017 15:20:01

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @GuideGUI_OpeningFcn, ...
                   'gui_OutputFcn',  @GuideGUI_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

% --- Executes just before GuideGUI is made visible.
function GuideGUI_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to GuideGUI (see VARARGIN)

% Choose default command line output for GuideGUI
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes GuideGUI wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = GuideGUI_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --------------------------------------------------------------------
%if we end up controlling solenoids and bowing/fingering motors all froms
%separate arduinos, all we need to do is create different handles for all
%the different arduinos that we are using
%the details of the functions themselves will not change
%ex, if one arduino controls string actuation, and another controls
%solenoids, we could raiseAllSolenoids(arduino1) and moveToG(arduino2)
%we just need to make sure to properly initialize arduino1 and arduino2
%and connect them to different COM ports

%TO DO: Create a function that communcicates with Arduino to control linear
%drive motor on neck-> 
.

% --- Executes on button press in pushbutton5.
function pushbutton5_Callback(hObject, eventdata, handles)
    disp('Now playing G!')
    %raiseAllSolenoids(ourArduino); %this function will be stored somewhere else
    %pass in a handle to the ourArduino we are currently using
    
    %after raising all solenoids, want to move to correct string!
    %moveToG(ourArduino);
    
% --- Executes on button press in pushbutton9.
function pushbutton9_Callback(hObject, eventdata, handles)
    disp('Now playing D!')
    %raiseAllSolenoids(ourArduino);
    %moveToD(ourArduino);

% --- Executes on button press in pushbutton7.
function pushbutton7_Callback(hObject, eventdata, handles)
    disp('Now playing A!')
    %raiseAllSolenoids(ourArduino);
    %moveToA(ourArduino);

% --- Executes on button press in pushbutton8.
function pushbutton8_Callback(hObject, eventdata, handles)
    disp('Now playing E!')
    %raiseAllSolenoids(ourArduino);
    %moveToE(ourArduino);

    %THIS IS THE START OF THE FIRST POSITION NOTES
% --- Executes on button press in pushbutton10.
function pushbutton10_Callback(hObject, eventdata, handles)
    disp('Now playing G#!')

% --- Executes on button press in pushbutton11.
function pushbutton11_Callback(hObject, eventdata, handles)
    disp('Now playing A#!')

% --- Executes on button press in pushbutton12.
function pushbutton12_Callback(hObject, eventdata, handles)
    disp('Now playing F!')


% --- Executes on button press in pushbutton13.
function pushbutton13_Callback(hObject, eventdata, handles)
    disp('Now playing D#!')

%START OF THE 2ND POSITION NOTES!
%ALL OF THESE ARE PRODUCED WITH THE FIRST SOLENOID

% --- Executes on button press in pushbutton14.
function pushbutton14_Callback(hObject, eventdata, handles)
    disp('Now playing A!')
    %depressFirstSolenoid(ourArduino);

% --- Executes on button press in pushbutton15.
function pushbutton15_Callback(hObject, eventdata, handles)
    disp('Now playing B')
    %depressFirstSolenoid(ourArduino);

% --- Executes on button press in pushbutton16.
function pushbutton16_Callback(hObject, eventdata, handles)
    disp('Now playing F#!')
    %depressFirstSolenoid(ourArduino);

% --- Executes on button press in pushbutton17.
function pushbutton17_Callback(hObject, eventdata, handles)
   disp('Now playing E!')
   depressFirstSolenoid(ourArduino);
  
%THIS IS THE START OF THE 3RD POSITION NOTES
% --- Executes on button press in pushbutton18.
function pushbutton18_Callback(hObject, eventdata, handles)
   disp('Now playing A#!')

% --- Executes on button press in pushbutton19.
function pushbutton19_Callback(hObject, eventdata, handles)
   disp('Now playing C!')

% --- Executes on button press in pushbutton20.
function pushbutton20_Callback(hObject, eventdata, handles)
   disp('Now playing G!')

% --- Executes on button press in pushbutton21.
function pushbutton21_Callback(hObject, eventdata, handles)
   disp('Now playing F!')

 %THIS IS THE START OF THE 4TH POSITION NOTES
 %ALL OF THESE ARE PRODUCED BY DEPRESSING THE 2ND SOLENOID
% --- Executes on button press in pushbutton22.
function pushbutton22_Callback(hObject, eventdata, handles)
   disp('Now playing B!')
   %depressSecondSolenoid(ourArduino);
% --- Executes on button press in pushbutton23.
function pushbutton23_Callback(hObject, eventdata, handles)
   disp('Now playing C#!')
   %depressSecondSolenoid(ourArduino);
% --- Executes on button press in pushbutton24.
function pushbutton24_Callback(hObject, eventdata, handles)
   disp('Now playing G#!')
   %depressSecondSolenoid(ourArduino);
% --- Executes on button press in pushbutton25.
function pushbutton25_Callback(hObject, eventdata, handles)
   disp('Now playing F#!')
   %depressSecondSolenoid(ourArduino);

%THIS IS THE START OF THE 5TH POSITION NOTES
%ALL OF THESE ARE PRODUCED BY DEPRESSING THE THIRD SOLENOID
% --- Executes on button press in pushbutton26.
function pushbutton26_Callback(hObject, eventdata, handles)
       disp('Now playing C!')
       %depressThirdSolenoid(ourArduino);
% --- Executes on button press in pushbutton27.
function pushbutton27_Callback(hObject, eventdata, handles)
   disp('Now playing D!')
   %depressThirdSolenoid(ourArduino);
% --- Executes on button press in pushbutton28.
function pushbutton28_Callback(hObject, eventdata, handles)
   disp('Now playing A!')
   %depressThirdSolenoid(ourArduino);
% --- Executes on button press in pushbutton29.
function pushbutton29_Callback(hObject, eventdata, handles)
   disp('Now playing G!')
   %depressThirdSolenoid(ourArduino);
%THIS IS THE START OF THE 6TH POSITION NOTES
% --- Executes on button press in pushbutton30.
function pushbutton30_Callback(hObject, eventdata, handles)
   disp('Now playing C#!')

% --- Executes on button press in pushbutton31.
function pushbutton31_Callback(hObject, eventdata, handles)
    disp('Now playing D#!')
    

% --- Executes on button press in pushbutton32.
function pushbutton32_Callback(hObject, eventdata, handles)
       disp('Now playing A#!')

% --- Executes on button press in pushbutton33.
function pushbutton33_Callback(hObject, eventdata, handles)
       disp('Now playing G#!')

% --- Executes on button press in pushbutton34.
function pushbutton34_Callback(hObject, eventdata, handles)
       disp('Now playing D!')

% --- Executes on button press in pushbutton35.
function pushbutton35_Callback(hObject, eventdata, handles)
   disp('Now playing E!')

% --- Executes on button press in pushbutton36.
function pushbutton36_Callback(hObject, eventdata, handles)
   disp('Now playing B!')

% --- Executes on button press in pushbutton37.
function pushbutton37_Callback(hObject, eventdata, handles)
   disp('Now playing A!')
